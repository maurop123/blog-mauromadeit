<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by Mauro Perez on Medium]]></title>
        <description><![CDATA[Stories by Mauro Perez on Medium]]></description>
        <link>https://medium.com/@mauromadeit?source=rss-979571916508------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/1*iRGQvYmEfV_2Ubxyg8Gvvw.jpeg</url>
            <title>Stories by Mauro Perez on Medium</title>
            <link>https://medium.com/@mauromadeit?source=rss-979571916508------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Tue, 10 Apr 2018 18:11:08 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/@mauromadeit" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[How Vue-Cli 3 Will Shape Our Future]]></title>
            <link>https://medium.com/vuetify/how-vue-cli-3-will-shape-our-future-eb7c01f4a241?source=rss-979571916508------2</link>
            <guid isPermaLink="false">https://medium.com/p/eb7c01f4a241</guid>
            <category><![CDATA[javascript]]></category>
            <category><![CDATA[vuetify]]></category>
            <category><![CDATA[vuejs]]></category>
            <category><![CDATA[vue-cli]]></category>
            <category><![CDATA[front-end-development]]></category>
            <dc:creator><![CDATA[Mauro Perez]]></dc:creator>
            <pubDate>Fri, 30 Mar 2018 13:25:14 GMT</pubDate>
            <atom:updated>2018-03-30T13:25:14.509Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/551/1*vE6DRUQ2nVeu_oG2m1PUoQ.png" /></figure><p>Vue-cli 3 is now in beta, and it’s been rebuilt from the ground up. For about a year now, I’ve been in charge of the Vuetify templates made under vue-cli 2.x, and most recently I made <a href="https://github.com/vuetifyjs/vue-cli-plugin-vuetify">vue-cli-plugin-vuetify</a> for the new vue-cli 3. Based on that experience and I want to share my thoughts on how the new vue-cli will forever change the way we all develop with Vue.</p><p><strong>Disclaimer: </strong>I won’t be giving a walk-through of how to use vue-cli 3 in this post. However, there are two excellent guides out there. The first is <a href="https://alligator.io/vuejs/using-new-vue-cli-3/">a post by Alligator</a>, and the second is <a href="https://www.youtube.com/watch?v=UXZjyG87fjs">a YouTube video of Evan You’s demo from his latest talk</a>.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*WtPSQ0Nhxrs1F2QkSdt1Og.png" /><figcaption><a href="https://youtu.be/TRJMT9yjONQ?t=10m13s">https://youtu.be/TRJMT9yjONQ?t=10m13s</a></figcaption></figure><p>If you already know all about vue-cli 2.x’s problems, feel free to skip to the next section. Below I’ll summarize the 3 main issues that lead to the old cli’s redesign.</p><h4>1. Templates quickly grow stale</h4><p>The first and main problem the old template-based system has is that it’s hard to keep templates, as well the apps made from them, up-to-date with the latest upstream changes.</p><p>The core team maintains 6 templates, the most popular one being <a href="https://github.com/vuejs-templates/webpack">vuejs-templates/webpack</a>. This one template has been forked over 3,000 times, which makes sense since the template’s own README suggests that you “Fork It And Make Your Own”.</p><p>With that said, any given update in that webpack template immediately puts all those forked templates out-of-date, and it’s not easy to update. First, a template would need to merge (<a href="https://medium.com/front-end-hacking/avoid-80-of-merge-conflicts-with-git-rebase-b5d755a082a6">preferably rebase</a>) and test those changes. This is difficult to automate because there are always git conflicts one has to manually resolve. Also, testing templates is pretty tedious since you need to make an app for each of the different permutations possible, or at least the most important ones, and then run your tests on each.</p><p>The situation is even worse for an app that’s been scaffolded from a template. Short of manually making the changes, or making a new project and copying over the src files, there is virtually no way to get those updates.</p><h4>2. It’s still not easy enough to get started</h4><p>While there are more than 3,000 forks of Vue templates out there, realistically only a few dozen of them are well-known so as to be viable options for most developers. Even still, it’s a lot. Vuetify offers 9 templates to choose from! That’s a pretty big rolodex to sift through to find your app’s starting point, which is enough possibility paralysis for even the hardiest of developers.</p><p>Then imagine the dozen or so choices a user has to make once they’ve decided on one template. Since many questions are “do you want to use this library or that one?” it’s easy to lose hours researching and deciding between tools to make the “right choice” since aside from starting over, there is no turning back.</p><h4>3. All the libraries’ dependencies are in the same files</h4><p>If you’ve never developed or maintained a template under the old cli before, here’s an oversimplification of it. Mainly, what it does is copy source code and config files into your project’s directory. Almost every file contains dozens of conditional statements from each supported library that toggles different permutations of the app to scaffold, all based on the user’s choices during setup. That’s it in a nutshell.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*3n8_Q_wl7YONo_sQxVawEQ.png" /><figcaption>Vuetify’s webpack template package.json</figcaption></figure><p>This mix of concerns just compounds the first issue because it’s even harder to keep up with changes from other libraries, unless the upstream template syncs those changes, and you sync with the upstream, too. Despite the old cli’s undeniable usefulness, it’s a lot the work to maintain all those templates which makes the whole ecosystem pretty darn unsustainable.</p><blockquote>“Sustainable development is development that meets the needs of the present without compromising the ability of future generations to meet their own needs” — <a href="https://youtu.be/B3b4tremI5o?t=4m40s">Kevlin Henney</a></blockquote><h3>The Future Is All Plug And Play</h3><p>Never fear! Vue-cli 3 is here! And now with a brand spankin new <strong>plugin-based</strong> architecture!</p><p>The first way the new cli makes it easier to get started is by bringing down the number of templates to choose from to just 1. Just one single webpack template upon which libraries can <em>plug in</em> their custom functionality. As an old browserify fan it’s sad to say, but browserify will no longer be officially supported. Yes, it will be missed, but the core team’s gotta do what they gotta do, and focusing support on the libraries with the most demand just makes sense.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/1*asPu5VlOK4iQlNcvqD7w6Q.gif" /><figcaption>Made with <a href="https://kdenlive.org/">kdenlive</a> and <a href="https://ezgif.com/video-to-gif/">ezgif</a></figcaption></figure><p>With all those templates out of the way, now you can get started simply with vue create my-app. Then anytime after the initial setup you can install whatever additional features you want. Indeed, ANYTIME after, you can easily add new plugin to your app. No more having to make all the “right choices” when you first make your app. What a relief!</p><p>Say after a month of prototyping, you wanna try Vuetify on for size. No problem! Just run…</p><pre>yarn add vue-cli-plugin-vuetify<br>vue invoke vuetify</pre><p>That’s it! You’ll get the same easy setup experience you used to get from the old cli, but <em>way after</em> your app was made.</p><p>Oh, and the templates aren’t totally gone. We’ve merely transcended them. Plugins are still able to include their own template files as one can see in <a href="https://github.com/vuetifyjs/vue-cli-plugin-vuetify">Vuetify’s plugin</a>. Better yet, the new cli uses <a href="http://ejs.co/">EJS templating</a> instead.</p><h3>Teach An Old App New Tricks</h3><p>One of the most powerful features in vue-cli 3, is also likely the most subtle…</p><blockquote>You can run `vue invoke plugin` any time you want.</blockquote><p>Not just the first time you install a plugin, but <em>anytime after</em>, too. In theory, this means that a plugin can maintain itself overtime. A library like Vuetify can not only bump itself to the latest version in your package.json, but with the ability to rewrite any existing file, it should also be able to handle any migration required. The same goes for webpack updates, config changes, and virtually anything typically handled by the vue-cli or a plugin.</p><p>The issue of being able to pull in updates <em>after a project’s creation</em> was <a href="https://github.com/vuejs/vue-cli/issues/589#issue-257091511">one of Evan You’s top concerns</a> to resolve in the new vue-cli.</p><blockquote>…Currently, project build configurations are directly included in the template. This leads to a few problems… once created, it becomes difficult to upgrade an existing project to track latest changes in the remote template;</blockquote><p>One awesome upside is that it reduces the learning curve for beginners, whom otherwise would have to patch their app manually, which can be a daunting task, or forgo the changes and their benefits. Even for experienced devs it’s really helpful for offloading the maintenance of some of the app’s more infrastructural features that are often reused in each app so they can focus their time and attention instead on the features that truly makes their app unique.</p><h3>A DRYer Ecosystem</h3><p>The template developers of yesterday will be the plugin developers of tomorrow. Plugins will be the main way to add and maintain 3rd party Vue libraries to your app.</p><p>In the future, libraries won’t have to maintain several forks and clones of other templates just to add their support to the wide variety of web apps out there. SSR, PWA, Electron, Cordova, are just some of the flavors that Vuetify currently supports, and each one is a separate template to maintain. Well no more! Soon, we’ll start to see separate plugins emerge dedicated to adding and maintaining just one feature each.</p><p>In the future, almost every Vue app will be built from the new vue-cli. We’ll even see it used to make web components that work in React and Angular apps, as well as pages with vanilla Javascript (check out Evan’s talk for a demo). It’s never been a better time to be a Vue developer!</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/912/1*v8nA8Lhmjz7PhKxdpx2a6g.png" /><figcaption>Source — <a href="https://steemit.com/utopian-io/@luming/knowing-vue-an-easy-to-learn-open-source-framework">steemit</a></figcaption></figure><h3>Thanks for reading</h3><p>If you liked this post, please share, clap, comment, or all of the above! You can also check out more posts from <a href="https://medium.com/vuetify">Vuetify</a> and from <a href="https://medium.com/@mauromadeit">the author</a>.</p><p>Lastly, all links mentioned above are copied below for your convenience :)</p><h3>References</h3><ul><li>Vuetify vue-cli 3 plugin — <a href="https://github.com/vuetifyjs/vue-cli-plugin-vuetify">https://github.com/vuetifyjs/vue-cli-plugin-vuetify</a></li><li>Evan You’s walk-through — <a href="https://youtu.be/TRJMT9yjONQ?t=10m13s">https://youtu.be/TRJMT9yjONQ?t=10m13s</a></li><li>Alligator walk-through — <a href="https://alligator.io/vuejs/using-new-vue-cli-3/">https://alligator.io/vuejs/using-new-vue-cli-3/</a></li><li>Vue-cli 3 docs — <a href="https://github.com/vuejs/vue-cli/blob/dev/docs/README.md#cli">https://github.com/vuejs/vue-cli/blob/dev/docs/README.md#cli</a></li><li>Vue-cli 3’s official start— <a href="https://github.com/vuejs/vue-cli/issues/589#issue-257091511">https://github.com/vuejs/vue-cli/issues/589#issue-257091511</a></li><li>Original Vue Webpack template — <a href="https://github.com/vuejs-templates/webpack">https://github.com/vuejs-templates/webpack</a></li><li>New EJS template system — <a href="http://ejs.co/">http://ejs.co/</a></li><li>Small Is Beautiful talk by Kevlin Henney — <a href="https://youtu.be/B3b4tremI5o?t=4m40s">https://youtu.be/B3b4tremI5o?t=4m40s</a></li><li>Avoid 80% of Merge Conflicts — <a href="https://medium.com/front-end-hacking/avoid-80-of-merge-conflicts-with-git-rebase-b5d755a082a6">https://medium.com/front-end-hacking/avoid-80-of-merge-conflicts-with-git-rebase-b5d755a082a6</a></li></ul><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=eb7c01f4a241" width="1" height="1"><hr><p><a href="https://medium.com/vuetify/how-vue-cli-3-will-shape-our-future-eb7c01f4a241">How Vue-Cli 3 Will Shape Our Future</a> was originally published in <a href="https://medium.com/vuetify">Vuetify</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Yes! To use swim inside of the fish component, you would need to include it as a prop.]]></title>
            <link>https://medium.com/@mauromadeit/yes-to-use-swim-inside-of-the-fish-component-you-would-need-to-include-it-as-a-prop-7d41debd5909?source=rss-979571916508------2</link>
            <guid isPermaLink="false">https://medium.com/p/7d41debd5909</guid>
            <dc:creator><![CDATA[Mauro Perez]]></dc:creator>
            <pubDate>Thu, 15 Feb 2018 16:26:23 GMT</pubDate>
            <atom:updated>2018-02-15T16:26:23.474Z</atom:updated>
            <content:encoded><![CDATA[<p>Yes! To use swim inside of the fish component, you would need to include it as a prop.</p><p>I decided to leave out that code in my post to stay brief, but thanks for mentioning it for clarity’s sake.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=7d41debd5909" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Wow! Very inspiring to read what you planned do accomplish and what you actually did. Kudos!]]></title>
            <link>https://medium.com/@mauromadeit/wow-very-inspiring-to-read-what-you-planned-do-accomplish-and-what-you-actually-did-kudos-6648a8f35e16?source=rss-979571916508------2</link>
            <guid isPermaLink="false">https://medium.com/p/6648a8f35e16</guid>
            <dc:creator><![CDATA[Mauro Perez]]></dc:creator>
            <pubDate>Tue, 12 Dec 2017 17:45:42 GMT</pubDate>
            <atom:updated>2017-12-12T17:45:42.531Z</atom:updated>
            <content:encoded><![CDATA[<p>Wow! Very inspiring to read what you planned do accomplish and what you actually did. Kudos!</p><p>It also helps to be reminded of how it’s “still not great” for my female counterparts in the field since that’s just not a part of my own daily experience. In 2018, my goal is to remain sensitive to that reality. Thanks for sharing!</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=6648a8f35e16" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Thanks for the post.]]></title>
            <link>https://medium.com/@mauromadeit/thanks-for-the-post-8fa18457f0d9?source=rss-979571916508------2</link>
            <guid isPermaLink="false">https://medium.com/p/8fa18457f0d9</guid>
            <dc:creator><![CDATA[Mauro Perez]]></dc:creator>
            <pubDate>Tue, 12 Sep 2017 12:56:27 GMT</pubDate>
            <atom:updated>2017-09-12T12:56:27.688Z</atom:updated>
            <content:encoded><![CDATA[<p>Thanks for the post. Here’s another good resource that helped me learn some basics of design. http://www.visualmess.com</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=8fa18457f0d9" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Passing methods as props in Vue.js]]></title>
            <link>https://medium.com/front-end-hacking/passing-methods-as-props-in-vue-js-d65805bccee?source=rss-979571916508------2</link>
            <guid isPermaLink="false">https://medium.com/p/d65805bccee</guid>
            <category><![CDATA[front-end-development]]></category>
            <category><![CDATA[components]]></category>
            <category><![CDATA[best-practices]]></category>
            <category><![CDATA[javascript]]></category>
            <category><![CDATA[vuejs]]></category>
            <dc:creator><![CDATA[Mauro Perez]]></dc:creator>
            <pubDate>Wed, 19 Jul 2017 11:01:01 GMT</pubDate>
            <atom:updated>2017-07-19T15:34:45.816Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*fTV_1UOGZf60Oo-zC7O66w.jpeg" /></figure><p>Recently, I learned a new trick for keeping my Vue components more DRY.</p><p>You might be used to passing methods down to child components using custom event names like this…</p><pre>// Calling custom fish component<br>&lt;fish v-bind=&quot;{color, size}&quot; @swim=&quot;swim&quot; /&gt;</pre><pre>// Inside custom fish component<br>...<br>&lt;button @click=&quot;$emit(&#39;swim&#39;, data)&quot;&gt;<br>...</pre><p>But there is another more succinct way…</p><pre>// Calling custom fish component<br>&lt;fish v-bind=&quot;{color, size, swim}&quot; /&gt;</pre><pre>// Inside custom fish component<br>...<br>&lt;button @click=&quot;swim(data)&quot;&gt;<br>...</pre><p>In the first case, Vue is using the event system, and in the second the method prop is a simple callback. There are some reasons for using one approach over another, depending on context, of course.</p><p>Some find that keeping data and callbacks separated into props and events makes their components more clear and easier to understand. The docs provide an important distinction about using a custom event…</p><blockquote>…the child component is still completely decoupled from what happens outside of it. All it does is report information about its own activity, just in case a parent component might care.</blockquote><p>So if you don’t need to completely decouple your child component from its parent, you too can benefit from this sleeker syntax!</p><p>If you liked this trick, you can check out <a href="https://medium.com/front-end-hacking/keeping-props-dry-in-vue-js-9d8294fa708f">Keeping props DRY in Vue.js</a>.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=d65805bccee" width="1" height="1"><hr><p><a href="https://medium.com/front-end-hacking/passing-methods-as-props-in-vue-js-d65805bccee">Passing methods as props in Vue.js</a> was originally published in <a href="https://medium.com/front-end-hacking">Frontend Weekly</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Robert De Niro perfects the “whataboutism” technique in Wag the Dog.]]></title>
            <link>https://medium.com/@mauromadeit/robert-de-niro-perfects-the-whataboutism-technique-in-wag-the-dog-c8940d8e2359?source=rss-979571916508------2</link>
            <guid isPermaLink="false">https://medium.com/p/c8940d8e2359</guid>
            <dc:creator><![CDATA[Mauro Perez]]></dc:creator>
            <pubDate>Tue, 11 Jul 2017 21:41:06 GMT</pubDate>
            <atom:updated>2017-07-11T21:41:06.182Z</atom:updated>
            <content:encoded><![CDATA[<p>Robert De Niro perfects the “whataboutism” technique in Wag the Dog. Scary how true this has been and still is.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=c8940d8e2359" width="1" height="1">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Avoid 80% of Git merge conflicts]]></title>
            <link>https://medium.com/front-end-hacking/avoid-80-of-merge-conflicts-with-git-rebase-b5d755a082a6?source=rss-979571916508------2</link>
            <guid isPermaLink="false">https://medium.com/p/b5d755a082a6</guid>
            <category><![CDATA[software-development]]></category>
            <category><![CDATA[version-control]]></category>
            <category><![CDATA[front-end-development]]></category>
            <category><![CDATA[best-practices]]></category>
            <category><![CDATA[git]]></category>
            <dc:creator><![CDATA[Mauro Perez]]></dc:creator>
            <pubDate>Fri, 23 Jun 2017 03:31:00 GMT</pubDate>
            <atom:updated>2017-07-15T21:17:02.284Z</atom:updated>
            <content:encoded><![CDATA[<h3>...and make the rest trivial.</h3><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fgiphy.com%2Fembed%2FbEjLIhTDqJRaE%2Ftwitter%2Fiframe&amp;url=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2FbEjLIhTDqJRaE%2Fgiphy.gif&amp;image=https%3A%2F%2Fmedia.giphy.com%2Fmedia%2FbEjLIhTDqJRaE%2Fgiphy.gif&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=giphy" width="435" height="288" frameborder="0" scrolling="no"><a href="https://medium.com/media/16d3b3339b7c6ef96b355a357b7aac84/href">https://medium.com/media/16d3b3339b7c6ef96b355a357b7aac84/href</a></iframe><p>Afraid of merge conflicts or know someone who is? This post will share a way to handle merging branches so you never have to worry about merge conflicts again.</p><h3>Git is like making a sandwich</h3><p>Every time you make a commit to git, it adds your commit to the top of a pile of commits, like adding a slice of meat or cheese to the top of a sandwich. This pile of commits never topples over, no matter how tall it gets.</p><p>Order is important to this pile, as with a sandwich. You wouldn’t make a sandwich with all the bread sitting on top, right? If you would, that’s OK. I won’t judge. But order is still very important. Git merge and rebase are all about ordering your commits.</p><p>When you have a merge conflict, it’s like not knowing which slice goes first, the cheese or the bread. Sometimes Git will try to figure it out automatically, and other times it’s scared of messing things up and asks you for help. It’s annoying in the moment, but it’s better than a messed up sandwich.</p><h4>Disclaimer</h4><p>Technically, git merge is more than just piling code on top of more code. It actually looks through the pile for the last common commit between the two branches, and then tries to combine them from there. But if you follow the following method, you won’t need to worry about that, because this method will make sure that last common commit is always right on top. That way you get the nice sandwich effect.</p><h3>There are only two scenarios</h3><p>Most of the time, you will either be putting changes from your branch into master, or you’ll be putting changes from master into your branch.</p><p>The trick to avoiding merge conflicts is each time you have to put code from one branch into another, you just gotta figure out which of these two scenarios you are in.</p><h4>Merge my-branch onto master</h4><p>Say you are on <strong>master</strong> (and you’ve already run git pull), and you run…</p><pre>git merge my-branch</pre><p>Git is putting the changes from your branch on top of master.</p><h4>Rebase master onto my-branch</h4><p>Say you are on <strong>my-branch</strong>, and you run…</p><pre>git rebase master</pre><p>Git is taking off the changes you made on my-branch, then it is putting the latest changes from master, and finally it puts your changes from my-branch back on top. It’s like the second frame of the sandwich-making GIF above, when the top slice of bread is removed. After that, the meat and cheese are added, and then the top slice is put back on top of the whole pile. That’s what git rebase does.</p><h3>The steps</h3><p>In order to get the nice sandwich effect, where you’re just adding code to the pile and never getting a conflict, there are a couple steps you must follow.</p><p>First, make sure to git pull the latest changes into master.</p><p>Second, git rebase master into your branch. This will likely be the only time you get a conflict, and it should only be because someone else has changed the same code as you since the last time you rebased master, so it’s usually very easy to fix.</p><p>Do these first two steps often. At least once a day, if you’re branch lives that long.</p><p>Finally, whenever you want to merge your branch with master, make sure you do the first two steps right before, and then finally from master you can run git merge my-branch. Since your branch is totally up-to-date with master, Git will simply put your code on top of the master pile. Voila!</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b5d755a082a6" width="1" height="1"><hr><p><a href="https://medium.com/front-end-hacking/avoid-80-of-merge-conflicts-with-git-rebase-b5d755a082a6">Avoid 80% of Git merge conflicts</a> was originally published in <a href="https://medium.com/front-end-hacking">Frontend Weekly</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Vue’s new and improved prop.sync]]></title>
            <link>https://medium.com/front-end-hacking/vues-v-model-directive-vs-sync-modifier-d1f83957c57c?source=rss-979571916508------2</link>
            <guid isPermaLink="false">https://medium.com/p/d1f83957c57c</guid>
            <category><![CDATA[front-end-development]]></category>
            <category><![CDATA[best-practices]]></category>
            <category><![CDATA[components]]></category>
            <category><![CDATA[javascript]]></category>
            <category><![CDATA[vuejs]]></category>
            <dc:creator><![CDATA[Mauro Perez]]></dc:creator>
            <pubDate>Tue, 20 Jun 2017 16:33:52 GMT</pubDate>
            <atom:updated>2017-06-22T20:54:31.189Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/599/1*EeFpBMlA7kPCKjfb6sMY9w.png" /></figure><p>In Vue 2.3, the .sync modifier, which was removed in the past, has been reintroduced in a new way.</p><p>This post is going to explore two approaches to passing props down to child components and passing up the updates. The first is the familiar v-model and it’s Vue 2.2 update, and the second will be with .sync.</p><h3>v-model</h3><p>The parent component binds speaks to the child with the v-model directive.</p><pre>&lt;template&gt;<br>  &lt;doggie v-model=&quot;speaks&quot; /&gt;<br>&lt;/template&gt;</pre><pre>&lt;script&gt;<br>  export default {<br>    data: {<br>      speaks: &#39;bark!&#39;<br>    }<br>  }<br>&lt;/script&gt;</pre><p>Meanwhile the child declares a value prop which has the value of speaks.</p><p>It also emits an input event when the actual &lt;input /&gt; fires its own input event. The value passed to that event will update the parent’s speaks.</p><pre>&lt;template&gt;<br>    &lt;input :value=&quot;value&quot; <a href="http://twitter.com/input">@input</a>=&quot;$emit(&#39;input&#39;, $event.target.value)&quot;  /&gt;<br>&lt;/template&gt;</pre><pre>export default {<br>  props: [&#39;value&#39;],<br>}</pre><p>The child component using the prop value is just a default behavior, just like the name of the emit being input. Both can be overridden (if you’re using <a href="https://vuejs.org/v2/guide/components.html#Customizing-Component-v-model">Vue 2.2+</a>) by adding model to the child like this:</p><pre>export default {  <br>  props: [&#39;sound&#39;],<br>  model: {<br>    prop: &#39;sound&#39;,<br>    event: &#39;updateSound&#39;<br>  },<br>}</pre><p>Furthermore, now you can still declare thevalue prop for the child, except it won’t be tied to v-model anymore. Here’s the final working example.</p><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fjsfiddle.net%2Fmauromadeit%2Fdzuvu4jd%2Fembedded%2F&amp;url=https%3A%2F%2Fjsfiddle.net%2Fmauromadeit%2Fdzuvu4jd%2F&amp;image=https%3A%2F%2Fwww.gravatar.com%2Favatar%2F8ed62a780b8f7e7647615755685bac48%2F%3Fdefault%3D%26s%3D80&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=jsfiddle" width="600" height="400" frameborder="0" scrolling="no"><a href="https://medium.com/media/50636c0b9a910368d8be6418df8491a2/href">https://medium.com/media/50636c0b9a910368d8be6418df8491a2/href</a></iframe><h3>.sync</h3><p><em>Disclaimer</em>: This works in <a href="https://vuejs.org/v2/guide/components.html#sync-Modifier">Vue 2.3+</a></p><p>On obvious difference between v-model and .sync is the syntax. Here’s how the parent component could look.</p><pre>&lt;template&gt;<br>  &lt;doggie :size.sync=&quot;size&quot; /&gt;<br>&lt;/template&gt;</pre><pre>&lt;script&gt;<br>  export default {<br>    data: {<br>      size: &#39;little&#39;<br>    }<br>  }<br>&lt;/script&gt;</pre><p>With .sync, the child doesn’t need a value prop. Instead it uses the same prop name you synced in the parent.</p><p>It also instead of emitting an input event to update the prop, you emit the conveniently named event update:prop-name. This is the main difference between the old .sync and the new one. Now we need to emit this update event to stay consistent with how we update parent component data like how we do with v-model.</p><p>This is how the child could look.</p><pre>&lt;template&gt;<br>  &lt;input :value=&quot;size&quot; <a href="http://twitter.com/input">@input</a>=&quot;$emit(&#39;update:size&#39;, $event.target.value)&quot; /&gt;<br>&lt;/template&gt;</pre><pre>export default {<br>  props: [&#39;size&#39;],<br>}</pre><p>Another difference is that you can sync more than one prop to a component. Here’s the final working code.</p><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fjsfiddle.net%2Fmauromadeit%2F9po4j84o%2Fembedded%2F&amp;url=https%3A%2F%2Fjsfiddle.net%2Fmauromadeit%2F9po4j84o%2F&amp;image=https%3A%2F%2Fwww.gravatar.com%2Favatar%2F8ed62a780b8f7e7647615755685bac48%2F%3Fdefault%3D%26s%3D80&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=jsfiddle" width="600" height="400" frameborder="0" scrolling="no"><a href="https://medium.com/media/f2936ac6defb3eb5e799637bd5b75ac7/href">https://medium.com/media/f2936ac6defb3eb5e799637bd5b75ac7/href</a></iframe><p>Thank you for checking this post out. If there’s something you feel I’ve left out, feel free to share in the comments below.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=d1f83957c57c" width="1" height="1"><hr><p><a href="https://medium.com/front-end-hacking/vues-v-model-directive-vs-sync-modifier-d1f83957c57c">Vue’s new and improved prop.sync</a> was originally published in <a href="https://medium.com/front-end-hacking">Frontend Weekly</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Keeping props DRY in Vue.js]]></title>
            <link>https://medium.com/front-end-hacking/keeping-props-dry-in-vue-js-9d8294fa708f?source=rss-979571916508------2</link>
            <guid isPermaLink="false">https://medium.com/p/9d8294fa708f</guid>
            <category><![CDATA[components]]></category>
            <category><![CDATA[front-end-development]]></category>
            <category><![CDATA[best-practices]]></category>
            <category><![CDATA[vuejs]]></category>
            <category><![CDATA[javascript]]></category>
            <dc:creator><![CDATA[Mauro Perez]]></dc:creator>
            <pubDate>Wed, 07 Jun 2017 15:22:04 GMT</pubDate>
            <atom:updated>2017-07-19T15:34:27.633Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/632/1*SLrxuR7nE37KfEmee2YXAQ.jpeg" /></figure><p>If you have some experience in Vue.js, you’ve probably seen a lot of this…</p><pre>&lt;cat-component :breed=&quot;breed&quot; :color=&quot;color&quot; :size=&quot;size&quot; /&gt;</pre><p>This way of declaring props can be so repetitive that it hurts. Wouldn’t something like this be better?</p><pre>&lt;cat-component :breed :color :size /&gt;</pre><p>You’d think so, but in fact a <a href="https://github.com/vuejs/vue/pull/2877">feature request</a> for this was considered and rejected by the Vue team. Here’s what Evan You had to say about it…</p><blockquote>…I am not really a fan of this proposal but it wasn’t immediately clear to me what turned me off… I realize it’s because of the semantic implication of HTML attributes that have no values — they are usually boolean attributes. An attribute with no value indicates the “presence of an attribute” or “truthiness”. Implicitly expanding to a binding overloads this perception.</blockquote><blockquote>In addition — if a prop in the child component is declared with type Boolean, the presence of the attribute indicates a true value. This would cause prop and :prop to have very different meanings, and is technically a breaking change.</blockquote><p>OK, that makes sense. But does that mean that our code must be so horridly verbose?</p><p>Nope! If your project supports ES6, then you can do this…</p><pre>&lt;cat-component v-bind=&quot;{breed, color, size}&quot; /&gt;</pre><p>Now that’s better. Still winning, Vue ;-)</p><p>If you liked this post, you can check out <a href="https://medium.com/@mauromadeit/passing-methods-as-props-in-vue-js-d65805bccee">Passing methods as props in Vue.js</a>.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=9d8294fa708f" width="1" height="1"><hr><p><a href="https://medium.com/front-end-hacking/keeping-props-dry-in-vue-js-9d8294fa708f">Keeping props DRY in Vue.js</a> was originally published in <a href="https://medium.com/front-end-hacking">Frontend Weekly</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Vuetify tabs working with Vue Router]]></title>
            <link>https://medium.com/front-end-hacking/vue-js-mobile-navbar-using-vuetify-803856f00dfd?source=rss-979571916508------2</link>
            <guid isPermaLink="false">https://medium.com/p/803856f00dfd</guid>
            <category><![CDATA[vuejs]]></category>
            <category><![CDATA[javascript]]></category>
            <category><![CDATA[vuetify]]></category>
            <category><![CDATA[front-end-development]]></category>
            <category><![CDATA[vue-router]]></category>
            <dc:creator><![CDATA[Mauro Perez]]></dc:creator>
            <pubDate>Fri, 02 Jun 2017 04:58:14 GMT</pubDate>
            <atom:updated>2017-06-04T19:40:21.195Z</atom:updated>
            <content:encoded><![CDATA[<p>This is the simple guide I wish I had when I was trying to make a mobile nav bar using Vuetify.</p><p><strong>tl;dr:</strong> here’s the working code</p><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fcodepen.io%2Fmaurop123%2Fembed%2Fpreview%2FVWZQaj%3Fheight%3D600%26slug-hash%3DVWZQaj%26default-tabs%3Djs%2Cresult%26host%3Dhttps%3A%2F%2Fcodepen.io%26embed-version%3D2&amp;url=https%3A%2F%2Fcodepen.io%2Fmaurop123%2Fpen%2FVWZQaj&amp;image=https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fi.cdpn.io%2F1284134.VWZQaj.small.aeb2567d-020e-4145-9e79-26e99cf1aff8.png&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=codepen" width="800" height="600" frameborder="0" scrolling="no"><a href="https://medium.com/media/6bacd2daee8066c0394b4b12006408bd/href">https://medium.com/media/6bacd2daee8066c0394b4b12006408bd/href</a></iframe><h3>A simple example</h3><p>There isn’t an example navbar working with vue-router in the docs, but the API makes it pretty easy. Starting with the <a href="https://vuetifyjs.com/components/tabs">5th mobile tab bar template</a> , here’s how a simple working template could look.</p><pre>&lt;div id=&quot;app&quot;&gt;<br>  &lt;v-tabs grow light&gt;<br>    &lt;v-tabs-bar&gt;<br>      &lt;v-tabs-item href=&quot;/&quot; router&gt;<br>        &lt;v-icon&gt;motorcycle&lt;/v-icon&gt;<br>      &lt;/v-tabs-item&gt;<br>      &lt;v-tabs-item href=&quot;/dog&quot; router&gt;<br>        &lt;v-icon&gt;pets&lt;/v-icon&gt;<br>      &lt;/v-tabs-item&gt;<br>    &lt;/v-tabs-bar&gt;<br>  &lt;/v-tabs&gt;<br>  <br>  &lt;router-view /&gt;<br>&lt;/div&gt;</pre><p>All you need to turn the &lt;v-tabs-item&gt; into a nav bar is to add the router prop. That’s it. Essentially, that turns the tab into a router-link. You can use the to prop in place of the href, but you don’t have to.</p><p>Oh, and one more thing. Instead of using &lt;v-tabs-content&gt;, you can delete that and put &lt;router-view&gt; anywhere outside of it. Give it a try!</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=803856f00dfd" width="1" height="1"><hr><p><a href="https://medium.com/front-end-hacking/vue-js-mobile-navbar-using-vuetify-803856f00dfd">Vuetify tabs working with Vue Router</a> was originally published in <a href="https://medium.com/front-end-hacking">Frontend Weekly</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
    </channel>
</rss>